% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RollingBackcusum.R
\name{RollingBackcusum}
\alias{RollingBackcusum}
\title{RollingBackcusum Class}
\arguments{
\item{windows}{Vector of windows that will be applied on features.}

\item{workers}{Number of threads.}

\item{lag}{Argument lag in runner package.}

\item{at}{Argument at in runner package.}

\item{alternative}{Check arguments of SBQ.test function in BackCUSUM package}

\item{return_power}{Power returns by return_power.}

\item{x}{Ohlcv object.}

\item{window}{Rolling window lengths.}

\item{price_col}{Prcie column in Ohlcv}

\item{params}{Vector of parameters}
}
\value{
A new `RollingBackcusum` object.

Calculate rolling radf features from exuber package.
}
\description{
Function calculates backCUSUM tests on rolling window from backCUSUM pakcage.

Create a new RollingBackcusum object.

Function calculates radf values from exuber package on rolling window.
}
\section{Fields}{

\describe{
\item{\code{alternative}}{Check arguments of SBQ.test function in BackCUSUM package}
}}

\examples{
data(spy_hour)
OhlcvInstance = Ohlcv$new(spy_hour, date_col = "datetime")
RollingBackcusumInit = RollingBackcusum$new(windows = 200,
                                            workers = 1L,
                                            at = c(300, 500),
                                            lag = 0L,
                                            alternative = "greater",
                                            return_power = 1)
x = RollingBackcusumInit$get_rolling_features(OhlcvInstance)
head(x)
# multiple windows and parallel
RollingBackcusumInit = RollingBackcusum$new(windows = c(22, 66),
                                            workers = 2L,
                                            at = c(300:315),
                                            lag = 1L,
                                            alternative = "greater",
                                            return_power = c(1, 2))
x = RollingBackcusumInit$get_rolling_features(OhlcvInstance)
head(x)
}
