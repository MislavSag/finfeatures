% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RollingTheft.R
\name{RollingTheft}
\alias{RollingTheft}
\title{RollingTheft Class}
\description{
Function calculates catch 22 features on rolling window.
}
\examples{
data(spy_hour)
OhlcvInstance = Ohlcv$new(spy_hour, date_col = "datetime")
# catch22 features
RollingTheftInit = RollingTheft$new(windows = 200,
                                    workers = 1L,
                                    at = c(300, 500),
                                    lag = 0L,
                                    na_pad = TRUE,
                                    simplify = FALSE,
                                    features_set = "catch22")
x = RollingTheftInit$get_rolling_features(OhlcvInstance)
head(x)
# feasts features
RollingTheftInit = RollingTheft$new(windows = 200,
                                    workers = 1L,
                                    at = c(300, 500),
                                    lag = 0L,
                                    na_pad = TRUE,
                                    simplify = FALSE,
                                    features_set = "feasts")
x = RollingTheftInit$get_rolling_features(OhlcvInstance)
head(x)
# tsfeatures
RollingTheftInit = RollingTheft$new(windows = 200,
                                    workers = 1L,
                                    at = c(300, 500),
                                    lag = 0L,
                                    na_pad = TRUE,
                                    simplify = FALSE,
                                    features_set = "tsfeatures")
x = RollingTheftInit$get_rolling_features(OhlcvInstance)
head(x)
# tsfel features
RollingTheftInit = RollingTheft$new(windows = 200,
                                    workers = 1L,
                                    at = c(300, 500),
                                    lag = 0L,
                                    na_pad = TRUE,
                                    simplify = FALSE,
                                    features_set = "tsfel")
x = RollingTheftInit$get_rolling_features(OhlcvInstance)
head(x)
}
\section{Super class}{
\code{\link[finfeatures:RollingGeneric]{finfeatures::RollingGeneric}} -> \code{RollingTheft}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{features_set}}{Features from theft package we want to calcualte.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{RollingTheft$new()}}
\item \href{#method-rolling_function}{\code{RollingTheft$rolling_function()}}
\item \href{#method-clone}{\code{RollingTheft$clone()}}
}
}
\if{html}{
\out{<details open ><summary>Inherited methods</summary>}
\itemize{
\item \out{<span class="pkg-link" data-pkg="finfeatures" data-topic="RollingGeneric" data-id="get_rolling_features">}\href{../../finfeatures/html/RollingGeneric.html#method-get_rolling_features}{\code{finfeatures::RollingGeneric$get_rolling_features()}}\out{</span>}
}
\out{</details>}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
Create a new RollingExuber object.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RollingTheft$new(
  windows,
  workers,
  lag,
  at,
  na_pad,
  simplify,
  features_set = c("catch22", "feasts", "tsfeatures", "kats", "tsfresh", "tsfel")
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{windows}}{Vector of windows that will be applied on features.}

\item{\code{workers}}{Number of workers. Greater than 1 for parallle processing}

\item{\code{lag}}{Lag variable in runner package.}

\item{\code{at}}{Argument at in runner package.}

\item{\code{na_pad}}{Argument na_pad in runner package.}

\item{\code{simplify}}{Argument simplify in runner package.}

\item{\code{features_set}}{Argument from the theft package}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A new \code{RollingTheft} object.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-rolling_function"></a>}}
\if{latex}{\out{\hypertarget{method-rolling_function}{}}}
\subsection{Method \code{rolling_function()}}{
Function calculates catch 22 features on rolling window.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RollingTheft$rolling_function(data, window)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{data}}{X field of Ohlcv object}

\item{\code{window}}{window length. This argument is given internaly}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Calculate rolling radf features from theft package.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RollingTheft$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
