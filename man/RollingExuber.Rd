% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RollingExuber.R
\name{RollingExuber}
\alias{RollingExuber}
\title{RollingExuber Class}
\arguments{
\item{windows}{Vector of windows that will be applied on features.}

\item{workers}{Number of workers. Greater than 1 for parallle processing}

\item{lag}{Lag variable in runner package.}

\item{at}{Argument at in runner package.}

\item{na_pad}{Argument na_pad in runner package.}

\item{simplify}{Argument simplify in runner package.}

\item{exuber_lag}{Exuber lag, see exuber package}

\item{data}{X field of Ohlcv object}

\item{window}{window length. This argument is given internaly}

\item{price}{Prcie column in Ohlcv}
}
\value{
A new `RollingExuber` object.

Calculate rolling radf features from exuber package.
}
\description{
Function calculates radf values from exuber package on rolling window.

Create a new RollingExuber object.

Function calculates radf values from exuber package on rolling window.
}
\section{Fields}{

\describe{
\item{\code{exuber_lag}}{Lag to use in exuber, see exuber package.}
}}

\examples{
data(spy_hour)
OhlcvInstance = Ohlcv$new(spy_hour, date_col = "datetime")
RollingExuberInit = RollingExuber$new(windows = 200,
                                      workers = 1L,
                                      at = c(300:310, 500:510),
                                      lag = 1L,
                                      na_pad = TRUE,
                                      simplify = FALSE,
                                      exuber_lag = 1)
x = RollingExuberInit$get_rolling_features(OhlcvInstance)
head(x)
# parallel and multiple windows
RollingExuberInit = RollingExuber$new(windows = c(200, 400),
                                      workers = 2L,
                                      at = c(300:310, 500:510),
                                      lag = 1L,
                                      na_pad = TRUE,
                                      simplify = FALSE)
x = RollingExuberInit$get_rolling_features(OhlcvInstance)
head(x)
}
